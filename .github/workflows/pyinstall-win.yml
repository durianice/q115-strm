name: PyInstaller

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest', 'ubuntu-latest']

    env:
      MAIN_PY_FILE: 'console.spec'  # Define the path to your main.py file here

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
      working-directory: ./

    - name: Install PyInstaller
      run: |
        pip install pyinstaller
      working-directory: ./

    - name: Build executable
      run: |
        pyinstaller ${{ env.MAIN_PY_FILE }}
      working-directory: ./

    - name: Create Artifact (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: windows-executables
        path: dist/

    - name: Zip the app (Windows)
      if: matrix.os == 'windows-latest'
      uses: vimtor/action-zip@v1.2
      with:
        files: dist/q115strm.exe
        dest: dist/windows-x86.zip

    - uses: actions/upload-artifact@v4
      if: matrix.os == 'windows-latest'
      with:
        name: windows app
        path: dist/linux-x86.zip

    - name: Create Artifact (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: linux-executables
        path: dist/
    - name: Zip the app (Windows)
      if: matrix.os == 'ubuntu-latest'
      uses: vimtor/action-zip@v1.2
      with:
        files: dist/q115strm
        dest: dist/linux-x86.zip

    - uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest'
      with:
        name: linux app
        path: dist/linux-x86.zip

    - name: List files in dist folder
      run: ls -R ./dist/

    # - name: create release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
    #   with:
    #     tag_name: ${{ github.run_number }}
    #     release_name: Release ${{ github.run_number }}
    #     body: |
    #       Test Release
    #     draft: false
    #     prerelease: false
  
    # - name: Upload release asset
    #   id: upload-release-asset
    #   uses: actions/upload-release-asset@v1
    #   env:
    #       GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
    #   with:
    #       upload_url: ${{ steps.create_release.outputs.upload_url }}
    #       asset_path: dist/windowx-x86.zip
    #       asset_name: windowx-x86.zip
    #       asset_content_type: application/zip
